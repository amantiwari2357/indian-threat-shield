spring:
  application:
    name: custom-siem-backend
  
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}
  
  datasource:
    url: jdbc:postgresql://${POSTGRES_HOST:localhost}:${POSTGRES_PORT:5432}/${POSTGRES_DB:custom_siem}
    username: ${POSTGRES_USER:custom_siem_user}
    password: ${POSTGRES_PASSWORD:custom_siem_password}
    driver-class-name: org.postgresql.Driver
  
  jpa:
    hibernate:
      ddl-auto: ${JPA_DDL_AUTO:update}
    show-sql: ${JPA_SHOW_SQL:false}
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
  
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms
  
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    consumer:
      group-id: custom-siem-backend
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      acks: all
      retries: 3

# Custom SIEM Configuration
custom-siem:
  elasticsearch:
    url: ${ELASTICSEARCH_URL:http://localhost:9200}
    index-prefix: custom-siem
    number-of-shards: 1
    number-of-replicas: 0
  
  security:
    jwt:
      secret: ${JWT_SECRET:your-super-secret-jwt-key-change-in-production}
      expiration: 86400000 # 24 hours
      refresh-expiration: 604800000 # 7 days
  
  alerting:
    email:
      enabled: ${EMAIL_ALERTS_ENABLED:false}
      smtp-host: ${SMTP_HOST:}
      smtp-port: ${SMTP_PORT:587}
      username: ${SMTP_USERNAME:}
      password: ${SMTP_PASSWORD:}
    slack:
      enabled: ${SLACK_ALERTS_ENABLED:false}
      webhook-url: ${SLACK_WEBHOOK_URL:}
    webhook:
      enabled: ${WEBHOOK_ALERTS_ENABLED:false}
      url: ${WEBHOOK_URL:}
  
  agent:
    registration:
      enabled: true
      auto-approve: ${AGENT_AUTO_APPROVE:false}
    heartbeat:
      interval: 30 # seconds
      timeout: 90 # seconds
  
  rules:
    engine:
      enabled: true
      batch-size: 1000
      processing-interval: 5000 # milliseconds
  
  dashboard:
    default-page-size: 50
    max-page-size: 1000
    session-timeout: 3600 # seconds

# Server Configuration
server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: /api/v1
  
# Logging Configuration
logging:
  level:
    com.customsiem: ${LOG_LEVEL:INFO}
    org.springframework.security: DEBUG
    org.springframework.kafka: DEBUG
    co.elastic.clients: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/custom-siem-backend.log
    max-size: 100MB
    max-history: 30

# Management Endpoints
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when-authorized
  metrics:
    export:
      prometheus:
        enabled: true

# OpenAPI/Swagger Configuration
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operations-sorter: method
  info:
    title: Custom SIEM Backend API
    description: Backend API for Custom SIEM Tool
    version: 1.0.0
    contact:
      name: Custom SIEM Team
      email: support@custom-siem.com 