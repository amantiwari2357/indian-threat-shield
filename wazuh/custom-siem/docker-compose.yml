version: '3.8'

services:
  # Elasticsearch for log storage and indexing
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: custom-siem-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - custom-siem-network

  # Kibana for dashboard and visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: custom-siem-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - custom-siem-network

  # Kafka for log streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: custom-siem-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - custom-siem-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: custom-siem-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - custom-siem-network

  # Backend API (Spring Boot)
  backend-api:
    build:
      context: ./backend-api
      dockerfile: Dockerfile
    container_name: custom-siem-backend
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
    depends_on:
      - elasticsearch
      - kafka
    networks:
      - custom-siem-network
    volumes:
      - ./backend-api/logs:/app/logs

  # Dashboard Frontend
  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    container_name: custom-siem-dashboard
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8080
      - REACT_APP_ELASTICSEARCH_URL=http://localhost:9200
    depends_on:
      - backend-api
    networks:
      - custom-siem-network

  # Log Collector (Fluent Bit)
  log-collector:
    image: fluent/fluent-bit:2.1
    container_name: custom-siem-log-collector
    volumes:
      - ./log-collector/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf
      - ./log-collector/parsers.conf:/fluent-bit/etc/parsers.conf
      - /var/log:/host/var/log:ro
    depends_on:
      - kafka
    networks:
      - custom-siem-network

  # Rule Engine
  rule-engine:
    build:
      context: ./rule-engine
      dockerfile: Dockerfile
    container_name: custom-siem-rule-engine
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - elasticsearch
      - kafka
    networks:
      - custom-siem-network
    volumes:
      - ./rules:/app/rules:ro

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: custom-siem-redis
    ports:
      - "6379:6379"
    networks:
      - custom-siem-network

  # PostgreSQL for user management and configuration
  postgres:
    image: postgres:15-alpine
    container_name: custom-siem-postgres
    environment:
      POSTGRES_DB: custom_siem
      POSTGRES_USER: custom_siem_user
      POSTGRES_PASSWORD: custom_siem_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - custom-siem-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: custom-siem-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - dashboard
      - backend-api
    networks:
      - custom-siem-network

volumes:
  elasticsearch_data:
    driver: local
  postgres_data:
    driver: local

networks:
  custom-siem-network:
    driver: bridge 